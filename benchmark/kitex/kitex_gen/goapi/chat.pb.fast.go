// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package goapi

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Opentracing) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Opentracing[number], err)
}

func (x *Opentracing) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.High, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *Opentracing) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Low, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *Opentracing) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SpanID, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *ChatRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ChatRequest[number], err)
}

func (x *ChatRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ChatRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Opentracing
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Opentracing = &v
	return offset, nil
}

func (x *ChatResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ChatResponse[number], err)
}

func (x *ChatResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *Opentracing) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Opentracing) fastWriteField1(buf []byte) (offset int) {
	if x.High == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetHigh())
	return offset
}

func (x *Opentracing) fastWriteField2(buf []byte) (offset int) {
	if x.Low == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetLow())
	return offset
}

func (x *Opentracing) fastWriteField3(buf []byte) (offset int) {
	if x.SpanID == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 3, x.GetSpanID())
	return offset
}

func (x *ChatRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ChatRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMessage())
	return offset
}

func (x *ChatRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Opentracing == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetOpentracing())
	return offset
}

func (x *ChatResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ChatResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *Opentracing) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Opentracing) sizeField1() (n int) {
	if x.High == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetHigh())
	return n
}

func (x *Opentracing) sizeField2() (n int) {
	if x.Low == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetLow())
	return n
}

func (x *Opentracing) sizeField3() (n int) {
	if x.SpanID == 0 {
		return n
	}
	n += fastpb.SizeUint64(3, x.GetSpanID())
	return n
}

func (x *ChatRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ChatRequest) sizeField1() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMessage())
	return n
}

func (x *ChatRequest) sizeField2() (n int) {
	if x.Opentracing == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetOpentracing())
	return n
}

func (x *ChatResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ChatResponse) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetCode())
	return n
}

var fieldIDToName_Opentracing = map[int32]string{
	1: "High",
	2: "Low",
	3: "SpanID",
}

var fieldIDToName_ChatRequest = map[int32]string{
	1: "Message",
	2: "Opentracing",
}

var fieldIDToName_ChatResponse = map[int32]string{
	1: "Code",
}
